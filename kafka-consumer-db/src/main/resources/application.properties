# Application Name
spring.application.name=kafka-consumer-db

# Server Port (If running as a web server - optional, can be disabled)
# server.port=8083 # Farklı bir port verelim gerekirse

# Kafka Topic Names
kafka.topic.raw-rates=raw-rates
kafka.topic.calculated-rates=calculated-rates


# Kafka Consumer Configuration
# Bootstrap servers Docker Compose environment variable ile verilecek (SPRING_KAFKA_BOOTSTRAP_SERVERS)
# spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=rate-db-consumers 
# Consumer grup ID'si
spring.kafka.consumer.auto-offset-reset=earliest 
# Topic'e ilk bağlandığında en baştan başla
# Topic isimleri @KafkaListener içinde belirtilecek

# Datasource Configuration (PostgreSQL)
# Bağlantı bilgileri Docker Compose environment variable'ları ile verilecek
# (SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME, SPRING_DATASOURCE_PASSWORD)
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update 
# Uygulama başlarken tabloyu oluştur/güncelle (geliştirme için)
spring.jpa.show-sql=false 
# SQL sorgularını loglama (geliştirme sırasında true olabilir)
spring.jpa.properties.hibernate.format_sql=false 
# SQL'i formatlama
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging
logging.level.com.findata.kafkaconsumerdb=DEBUG
  # Bu projenin log seviyesi
logging.level.org.springframework.kafka=INFO
  # Kafka loglarını azaltabiliriz
logging.level.org.hibernate=WARN 
# Hibernate loglarını azaltabiliriz